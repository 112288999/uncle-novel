import com.unclezs.novel.app.jfx.plugin.packager.task.PackageTask
import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2'
    }
}
apply plugin: 'packager'

task testProp() {
    println sourceSets.main.resources.sourceDirectories.asPath
}

dependencies {
    implementation "com.google.code.gson:gson"
    implementation project(":app")
}

task obfuscate(type: ProGuardTask) {
    injars jar
    outjars "$buildDir/libs/${project.name}-pg.jar"
    libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod"
    libraryjars files(configurations.runtimeClasspath.collect())
    configuration "proguard.pro"
}

task packageLinux(type: PackageTask, dependsOn: build) {
    platform = "linux"
    createTar = true
    generateInstaller = true
}

task packageMac(type: PackageTask, dependsOn: build) {
    platform = "mac"
    createTar = true
    generateInstaller = true
    macConfig {
        generateDmg = true
        generatePkg = true
        appId = "com.unclezs.novel.app"
        icnsFile = file("${projectDir}/packager/logo/favicon.icns")
        return macConfig
    }
}
task packageWindows(type: PackageTask, dependsOn: build) {
    platform = "windows"
    createZip = true
    generateInstaller = false
    winConfig {
        icoFile = file("${projectDir}/packager/logo/favicon.ico")
        return winConfig
    }
}
packager {
    name = "Uncle小说"
    mainClass = 'com.unclezs.novel.app.jfx.launcher.Launcher'
    bundleJre = true
    jreDirectoryName = "runtime"
    copyDependencies = true
    customizedJre = false
    libsFolderName = "libraries"
    launcher {
        workDir = file("$buildDir/launcher")
        configName = "abc"
        configServerUri = file("$rootDir/$configName").toURI().toURL()
        serverUri = workDir.toURI().toURL()
        version = project.version
        appName = "Uncle小说"
        changeLog = ["更新了寂寞", "又更新了寂寞"]
        launcherClass = "com.unclezs.novel.app.jfx.app.ui.app.App"
        runTimeLibrary = ["javafx", "gson"]
        return launcher
    }
}

