import com.unclezs.novel.app.packager.task.PackageTask
import com.unclezs.novel.app.packager.task.UpgradeTask
import proguard.gradle.ProGuardTask

// prod / dev
def profile = "dev"
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2'
    }
}
apply plugin: 'app-packager'


dependencies {
    implementation project(":app-localized")
    implementation project(":app-framework")
    implementation "org.freemarker:freemarker"
    implementation "ch.qos.logback:logback-classic"
}

task obfuscate(type: ProGuardTask) {
    injars jar
    outjars "$buildDir/libs/${project.name}-pg.jar"
    libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod"
    libraryjars files(configurations.runtimeClasspath.collect())
    configuration "proguard.pro"
}

// 打包相关配置文件
def packagerDir = "${projectDir}/packager"
packager {
    name = "Uncle小说"
    version = project.version
    description = "提供网络小说的下载及阅读功能"

    url = "https://github.com/unclezs/NovelHarvester"
    organizationName = "unclezs"
    organizationUrl = "https://blog.unclezs.com"
    organizationEmail = "email@unclezs.com"

    mainModule = "com.unclezs.jfx.launcher"
    mainClass = 'com.unclezs.jfx.launcher.Launcher'
    libsFolderPath = "libraries"

    bundleJre = true
    bundleFxJre = true
    customizedJre = false
    jreDirName = "runtime"
    vmArgs = [
            "-Djava.util.logging.config.outFile=conf/jul.properties",
            "--add-modules ALL-SYSTEM",
            "--add-opens=java.base/java.lang=com.unclezs.jfx.launcher"
    ]
    vmOptionsFilePath = "conf/launcher.vmoptions"
    vmOptionsFile = file("${packagerDir}/resource/conf/vm.options")
    linuxConfig {
        iconFile = file("${packagerDir}/icon/favicon.png")
        return linuxConfig;
    }
    macConfig {
        generateDmg = true
        generatePkg = true
        startScriptName = "startApplication"
        appId = "com.unclezs.novel.app"
        iconFile = file("${packagerDir}/icon/favicon.icns")
        return macConfig
    }
    winConfig {
        generateSetup = true
        iconFile = file("${packagerDir}/icon/favicon.ico")
        wrapJar = true
        x64 = true
        internalName = packager.name
        companyName = "unclezs"
        copyright = "blog.unclezs.com"
        fileDescription = "Uncle小说 提供网络小说下载阅读功能"
        productVersion = project.version
        // inno setup配置
        showSelectInstallDirPage = true
        showSelectedProgramGroupPage = false
        showFinishedPage = true
        createDesktopIconTask = true
        // 简体:GBK ， 繁体:UTF-8 BOM
        setupLanguages.put("ChineseSimple", "${packagerDir}/inno-setup/language/chinese-simple.isl")
        setupLanguages.put("ChineseTraditional", "${packagerDir}/inno-setup/language/chinese-traditional.isl")
        return winConfig
    }
    launcher {
        coordinate = "com.unclezs:jfx-launcher:${property("app.launcher.version")}"
        withLibraries = true
        // 资源位置映射、按照文件名和后缀映射到本地相对目录
        resourceMapper = [
                "jar"      : "runtime/modules",
                "vmoptions": "conf",
        ]
        // 其他资源
        resource("$packagerDir/resource/conf/jul.properties", "conf")

//        url = outFile("$buildDir/server").toURI().toURL().toString()
        url = "http://uncle-novel.unclezs.com/novel/${profile}"
        // 配置文件在打包时已经确定，如果修改需要重新打包发布
        configPath = "conf/app.json"
        appName = packager.name
        version = project.version
        changeLog = ["完善打1111包", "了寂寞"]
        launchModule = "com.unclezs.novel.app.main"
        launchClass = "com.unclezs.novel.app.main.ui.app.App"
        moduleOptions = file("$projectDir/app.modularity").readLines()
        return launcher
    }
}

task packageLinux(type: PackageTask, dependsOn: build) {
    description = "打Linux的的包，DEB、RPM"
    platform = "linux"
    createZip = false
    generateInstaller = true
}
task packageMac(type: PackageTask, dependsOn: build) {
    description = "打Mac的的包，DMG、PKG"
    platform = "mac"
    createZip = false
    generateInstaller = true
}
task packageWin64(type: PackageTask, dependsOn: build) {
    description = "打64位Windows的包,EXE、Setup"
    platform = "win"
    createTar = false
    generateInstaller = true
}
task packageWin32(type: PackageTask, dependsOn: build) {
    description = "打32位Windows的包,EXE、Setup"
    platform = "win"
    // sudo setx /M JAVA_HOME_X86 G:/package/sdk/jdk/amazon/11.0.10_9
    def javaHome = System.getenv("JAVA_HOME_X86")
    if (javaHome != null) {
        jdkPath = file(javaHome)
    }
    def fxHome = System.getenv("JAVAFX_HOME_X86")
    // sudo setx /M JAVAFX_HOME_X86 G:/package/sdk/jfx/jmods-16-win-x86
    if (fxHome != null) {
        jfxPath = file(fxHome)
    }
    x64 = false
    createTar = false
    generateInstaller = true
}
task packageAlone(type: PackageTask, dependsOn: build) {
    description = "打不带Launcher的包"
    vmArgs = file("$projectDir/app.modularity").readLines()
    enabledLauncher = false
    createTar = false
    generateInstaller = false
    mainModule = "com.unclezs.novel.app.main"
    mainClass = "com.unclezs.novel.app.main.ui.app.App"
}
tasks.withType(UpgradeTask) {
    description = "生成并且部署升级相关文件"
    dryRun = false
    rsync = true
    url = "root@uncle-novel.unclezs.com:/www/wwwroot/uncle-novel.unclezs.com/novel/$profile"
    outDir = file("$buildDir/upgrade")
}